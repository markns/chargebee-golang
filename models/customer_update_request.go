// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerUpdateRequest customer update request
// swagger:model CustomerUpdateRequest
type CustomerUpdateRequest struct {

	// allow direct debit
	AllowDirectDebit bool `json:"allow_direct_debit,omitempty"`

	// auto collection
	AutoCollection string `json:"auto_collection,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// consolidated invoicing
	ConsolidatedInvoicing bool `json:"consolidated_invoicing,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// entity code
	EntityCode string `json:"entity_code,omitempty"`

	// exempt number
	ExemptNumber string `json:"exempt_number,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// fraud flag
	FraudFlag string `json:"fraud_flag,omitempty"`

	// invoice notes
	InvoiceNotes string `json:"invoice_notes,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// meta data
	MetaData string `json:"meta_data,omitempty"`

	// net term days
	NetTermDays int32 `json:"net_term_days,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// preferred currency code
	PreferredCurrencyCode string `json:"preferred_currency_code,omitempty"`

	// taxability
	Taxability string `json:"taxability,omitempty"`
}

// Validate validates this customer update request
func (m *CustomerUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoCollection(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntityCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFraudFlag(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaxability(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customerUpdateRequestTypeAutoCollectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerUpdateRequestTypeAutoCollectionPropEnum = append(customerUpdateRequestTypeAutoCollectionPropEnum, v)
	}
}

const (

	// CustomerUpdateRequestAutoCollectionOn captures enum value "on"
	CustomerUpdateRequestAutoCollectionOn string = "on"

	// CustomerUpdateRequestAutoCollectionOff captures enum value "off"
	CustomerUpdateRequestAutoCollectionOff string = "off"
)

// prop value enum
func (m *CustomerUpdateRequest) validateAutoCollectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerUpdateRequestTypeAutoCollectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomerUpdateRequest) validateAutoCollection(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoCollection) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutoCollectionEnum("auto_collection", "body", m.AutoCollection); err != nil {
		return err
	}

	return nil
}

var customerUpdateRequestTypeEntityCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["a","b","c","d","e","f","g","h","i","j","k","l","n","p","q","r","med1","med2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerUpdateRequestTypeEntityCodePropEnum = append(customerUpdateRequestTypeEntityCodePropEnum, v)
	}
}

const (

	// CustomerUpdateRequestEntityCodeA captures enum value "a"
	CustomerUpdateRequestEntityCodeA string = "a"

	// CustomerUpdateRequestEntityCodeB captures enum value "b"
	CustomerUpdateRequestEntityCodeB string = "b"

	// CustomerUpdateRequestEntityCodeC captures enum value "c"
	CustomerUpdateRequestEntityCodeC string = "c"

	// CustomerUpdateRequestEntityCodeD captures enum value "d"
	CustomerUpdateRequestEntityCodeD string = "d"

	// CustomerUpdateRequestEntityCodeE captures enum value "e"
	CustomerUpdateRequestEntityCodeE string = "e"

	// CustomerUpdateRequestEntityCodeF captures enum value "f"
	CustomerUpdateRequestEntityCodeF string = "f"

	// CustomerUpdateRequestEntityCodeG captures enum value "g"
	CustomerUpdateRequestEntityCodeG string = "g"

	// CustomerUpdateRequestEntityCodeH captures enum value "h"
	CustomerUpdateRequestEntityCodeH string = "h"

	// CustomerUpdateRequestEntityCodeI captures enum value "i"
	CustomerUpdateRequestEntityCodeI string = "i"

	// CustomerUpdateRequestEntityCodeJ captures enum value "j"
	CustomerUpdateRequestEntityCodeJ string = "j"

	// CustomerUpdateRequestEntityCodeK captures enum value "k"
	CustomerUpdateRequestEntityCodeK string = "k"

	// CustomerUpdateRequestEntityCodeL captures enum value "l"
	CustomerUpdateRequestEntityCodeL string = "l"

	// CustomerUpdateRequestEntityCodeN captures enum value "n"
	CustomerUpdateRequestEntityCodeN string = "n"

	// CustomerUpdateRequestEntityCodeP captures enum value "p"
	CustomerUpdateRequestEntityCodeP string = "p"

	// CustomerUpdateRequestEntityCodeQ captures enum value "q"
	CustomerUpdateRequestEntityCodeQ string = "q"

	// CustomerUpdateRequestEntityCodeR captures enum value "r"
	CustomerUpdateRequestEntityCodeR string = "r"

	// CustomerUpdateRequestEntityCodeMed1 captures enum value "med1"
	CustomerUpdateRequestEntityCodeMed1 string = "med1"

	// CustomerUpdateRequestEntityCodeMed2 captures enum value "med2"
	CustomerUpdateRequestEntityCodeMed2 string = "med2"
)

// prop value enum
func (m *CustomerUpdateRequest) validateEntityCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerUpdateRequestTypeEntityCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomerUpdateRequest) validateEntityCode(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityCodeEnum("entity_code", "body", m.EntityCode); err != nil {
		return err
	}

	return nil
}

var customerUpdateRequestTypeFraudFlagPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["safe","suspicious","fraudulent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerUpdateRequestTypeFraudFlagPropEnum = append(customerUpdateRequestTypeFraudFlagPropEnum, v)
	}
}

const (

	// CustomerUpdateRequestFraudFlagSafe captures enum value "safe"
	CustomerUpdateRequestFraudFlagSafe string = "safe"

	// CustomerUpdateRequestFraudFlagSuspicious captures enum value "suspicious"
	CustomerUpdateRequestFraudFlagSuspicious string = "suspicious"

	// CustomerUpdateRequestFraudFlagFraudulent captures enum value "fraudulent"
	CustomerUpdateRequestFraudFlagFraudulent string = "fraudulent"
)

// prop value enum
func (m *CustomerUpdateRequest) validateFraudFlagEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerUpdateRequestTypeFraudFlagPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomerUpdateRequest) validateFraudFlag(formats strfmt.Registry) error {

	if swag.IsZero(m.FraudFlag) { // not required
		return nil
	}

	// value enum
	if err := m.validateFraudFlagEnum("fraud_flag", "body", m.FraudFlag); err != nil {
		return err
	}

	return nil
}

var customerUpdateRequestTypeTaxabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["taxable","exempt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerUpdateRequestTypeTaxabilityPropEnum = append(customerUpdateRequestTypeTaxabilityPropEnum, v)
	}
}

const (

	// CustomerUpdateRequestTaxabilityTaxable captures enum value "taxable"
	CustomerUpdateRequestTaxabilityTaxable string = "taxable"

	// CustomerUpdateRequestTaxabilityExempt captures enum value "exempt"
	CustomerUpdateRequestTaxabilityExempt string = "exempt"
)

// prop value enum
func (m *CustomerUpdateRequest) validateTaxabilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerUpdateRequestTypeTaxabilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomerUpdateRequest) validateTaxability(formats strfmt.Registry) error {

	if swag.IsZero(m.Taxability) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaxabilityEnum("taxability", "body", m.Taxability); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerUpdateRequest) UnmarshalBinary(b []byte) error {
	var res CustomerUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
