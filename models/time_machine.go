// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeMachine time machine
// swagger:model TimeMachine

type TimeMachine struct {

	// destination time
	DestinationTime int64 `json:"destination_time,omitempty"`

	// error json
	ErrorJSON string `json:"error_json,omitempty"`

	// failure code
	FailureCode string `json:"failure_code,omitempty"`

	// failure reason
	FailureReason string `json:"failure_reason,omitempty"`

	// genesis time
	GenesisTime int64 `json:"genesis_time,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// null
	Null *TimeMachine `json:"null,omitempty"`

	// time travel status
	TimeTravelStatus string `json:"time_travel_status,omitempty"`
}

/* polymorph TimeMachine destination_time false */

/* polymorph TimeMachine error_json false */

/* polymorph TimeMachine failure_code false */

/* polymorph TimeMachine failure_reason false */

/* polymorph TimeMachine genesis_time false */

/* polymorph TimeMachine name false */

/* polymorph TimeMachine null false */

/* polymorph TimeMachine time_travel_status false */

// Validate validates this time machine
func (m *TimeMachine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNull(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeTravelStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeMachine) validateNull(formats strfmt.Registry) error {

	if swag.IsZero(m.Null) { // not required
		return nil
	}

	if m.Null != nil {

		if err := m.Null.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("null")
			}
			return err
		}
	}

	return nil
}

var timeMachineTypeTimeTravelStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not_enabled","in_progress","succeeded","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeMachineTypeTimeTravelStatusPropEnum = append(timeMachineTypeTimeTravelStatusPropEnum, v)
	}
}

const (
	// TimeMachineTimeTravelStatusNotEnabled captures enum value "not_enabled"
	TimeMachineTimeTravelStatusNotEnabled string = "not_enabled"
	// TimeMachineTimeTravelStatusInProgress captures enum value "in_progress"
	TimeMachineTimeTravelStatusInProgress string = "in_progress"
	// TimeMachineTimeTravelStatusSucceeded captures enum value "succeeded"
	TimeMachineTimeTravelStatusSucceeded string = "succeeded"
	// TimeMachineTimeTravelStatusFailed captures enum value "failed"
	TimeMachineTimeTravelStatusFailed string = "failed"
)

// prop value enum
func (m *TimeMachine) validateTimeTravelStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, timeMachineTypeTimeTravelStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TimeMachine) validateTimeTravelStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeTravelStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeTravelStatusEnum("time_travel_status", "body", m.TimeTravelStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeMachine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeMachine) UnmarshalBinary(b []byte) error {
	var res TimeMachine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
