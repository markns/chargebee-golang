// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentSourceCreateUsingTempTokenRequest payment source create using temp token request
// swagger:model PaymentSourceCreateUsingTempTokenRequest

type PaymentSourceCreateUsingTempTokenRequest struct {

	// customer id
	CustomerID string `json:"customer_id,omitempty"`

	// gateway account id
	GatewayAccountID string `json:"gateway_account_id,omitempty"`

	// issuing country
	IssuingCountry string `json:"issuing_country,omitempty"`

	// replace primary payment source
	ReplacePrimaryPaymentSource bool `json:"replace_primary_payment_source,omitempty"`

	// tmp token
	TmpToken string `json:"tmp_token,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

/* polymorph PaymentSourceCreateUsingTempTokenRequest customer_id false */

/* polymorph PaymentSourceCreateUsingTempTokenRequest gateway_account_id false */

/* polymorph PaymentSourceCreateUsingTempTokenRequest issuing_country false */

/* polymorph PaymentSourceCreateUsingTempTokenRequest replace_primary_payment_source false */

/* polymorph PaymentSourceCreateUsingTempTokenRequest tmp_token false */

/* polymorph PaymentSourceCreateUsingTempTokenRequest type false */

// Validate validates this payment source create using temp token request
func (m *PaymentSourceCreateUsingTempTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var paymentSourceCreateUsingTempTokenRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorization","payment","refund","payment_reversal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentSourceCreateUsingTempTokenRequestTypeTypePropEnum = append(paymentSourceCreateUsingTempTokenRequestTypeTypePropEnum, v)
	}
}

const (
	// PaymentSourceCreateUsingTempTokenRequestTypeAuthorization captures enum value "authorization"
	PaymentSourceCreateUsingTempTokenRequestTypeAuthorization string = "authorization"
	// PaymentSourceCreateUsingTempTokenRequestTypePayment captures enum value "payment"
	PaymentSourceCreateUsingTempTokenRequestTypePayment string = "payment"
	// PaymentSourceCreateUsingTempTokenRequestTypeRefund captures enum value "refund"
	PaymentSourceCreateUsingTempTokenRequestTypeRefund string = "refund"
	// PaymentSourceCreateUsingTempTokenRequestTypePaymentReversal captures enum value "payment_reversal"
	PaymentSourceCreateUsingTempTokenRequestTypePaymentReversal string = "payment_reversal"
)

// prop value enum
func (m *PaymentSourceCreateUsingTempTokenRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentSourceCreateUsingTempTokenRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentSourceCreateUsingTempTokenRequest) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentSourceCreateUsingTempTokenRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentSourceCreateUsingTempTokenRequest) UnmarshalBinary(b []byte) error {
	var res PaymentSourceCreateUsingTempTokenRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
