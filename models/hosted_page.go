// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostedPage hosted page
// swagger:model HostedPage

type HostedPage struct {

	// checkout info
	CheckoutInfo string `json:"checkout_info,omitempty"`

	// created at
	CreatedAt int64 `json:"created_at,omitempty"`

	// embed
	Embed bool `json:"embed,omitempty"`

	// expires at
	ExpiresAt int64 `json:"expires_at,omitempty"`

	// failure reason
	FailureReason string `json:"failure_reason,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// pass thru content
	PassThruContent string `json:"pass_thru_content,omitempty"`

	// resource version
	ResourceVersion int64 `json:"resource_version,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

/* polymorph HostedPage checkout_info false */

/* polymorph HostedPage created_at false */

/* polymorph HostedPage embed false */

/* polymorph HostedPage expires_at false */

/* polymorph HostedPage failure_reason false */

/* polymorph HostedPage id false */

/* polymorph HostedPage pass_thru_content false */

/* polymorph HostedPage resource_version false */

/* polymorph HostedPage state false */

/* polymorph HostedPage type false */

/* polymorph HostedPage updated_at false */

/* polymorph HostedPage url false */

// Validate validates this hosted page
func (m *HostedPage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hostedPageTypeFailureReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["card_error","server_error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostedPageTypeFailureReasonPropEnum = append(hostedPageTypeFailureReasonPropEnum, v)
	}
}

const (
	// HostedPageFailureReasonCardError captures enum value "card_error"
	HostedPageFailureReasonCardError string = "card_error"
	// HostedPageFailureReasonServerError captures enum value "server_error"
	HostedPageFailureReasonServerError string = "server_error"
)

// prop value enum
func (m *HostedPage) validateFailureReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hostedPageTypeFailureReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HostedPage) validateFailureReason(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateFailureReasonEnum("failure_reason", "body", m.FailureReason); err != nil {
		return err
	}

	return nil
}

var hostedPageTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","requested","succeeded","cancelled","failed","acknowledged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostedPageTypeStatePropEnum = append(hostedPageTypeStatePropEnum, v)
	}
}

const (
	// HostedPageStateCreated captures enum value "created"
	HostedPageStateCreated string = "created"
	// HostedPageStateRequested captures enum value "requested"
	HostedPageStateRequested string = "requested"
	// HostedPageStateSucceeded captures enum value "succeeded"
	HostedPageStateSucceeded string = "succeeded"
	// HostedPageStateCancelled captures enum value "cancelled"
	HostedPageStateCancelled string = "cancelled"
	// HostedPageStateFailed captures enum value "failed"
	HostedPageStateFailed string = "failed"
	// HostedPageStateAcknowledged captures enum value "acknowledged"
	HostedPageStateAcknowledged string = "acknowledged"
)

// prop value enum
func (m *HostedPage) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hostedPageTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HostedPage) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var hostedPageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorization","payment","refund","payment_reversal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostedPageTypeTypePropEnum = append(hostedPageTypeTypePropEnum, v)
	}
}

const (
	// HostedPageTypeAuthorization captures enum value "authorization"
	HostedPageTypeAuthorization string = "authorization"
	// HostedPageTypePayment captures enum value "payment"
	HostedPageTypePayment string = "payment"
	// HostedPageTypeRefund captures enum value "refund"
	HostedPageTypeRefund string = "refund"
	// HostedPageTypePaymentReversal captures enum value "payment_reversal"
	HostedPageTypePaymentReversal string = "payment_reversal"
)

// prop value enum
func (m *HostedPage) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hostedPageTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HostedPage) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostedPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostedPage) UnmarshalBinary(b []byte) error {
	var res HostedPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
