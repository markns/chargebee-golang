// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddonUpdateRequest addon update request
// swagger:model AddonUpdateRequest
type AddonUpdateRequest struct {

	// accounting category1
	AccountingCategory1 string `json:"accounting_category1,omitempty"`

	// accounting category2
	AccountingCategory2 string `json:"accounting_category2,omitempty"`

	// accounting code
	AccountingCode string `json:"accounting_code,omitempty"`

	// charge type
	ChargeType string `json:"charge_type,omitempty"`

	// currency code
	CurrencyCode string `json:"currency_code,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled in portal
	EnabledInPortal bool `json:"enabled_in_portal,omitempty"`

	// invoice name
	InvoiceName string `json:"invoice_name,omitempty"`

	// invoice notes
	InvoiceNotes string `json:"invoice_notes,omitempty"`

	// meta data
	MetaData interface{} `json:"meta_data,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// period
	Period int32 `json:"period,omitempty"`

	// period unit
	PeriodUnit string `json:"period_unit,omitempty"`

	// price
	Price int32 `json:"price,omitempty"`

	// sku
	Sku string `json:"sku,omitempty"`

	// tax code
	TaxCode string `json:"tax_code,omitempty"`

	// tax profile id
	TaxProfileID string `json:"tax_profile_id,omitempty"`

	// taxable
	Taxable bool `json:"taxable,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this addon update request
func (m *AddonUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriodUnit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addonUpdateRequestTypeChargeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["recurring","non_recurring"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addonUpdateRequestTypeChargeTypePropEnum = append(addonUpdateRequestTypeChargeTypePropEnum, v)
	}
}

const (

	// AddonUpdateRequestChargeTypeRecurring captures enum value "recurring"
	AddonUpdateRequestChargeTypeRecurring string = "recurring"

	// AddonUpdateRequestChargeTypeNonRecurring captures enum value "non_recurring"
	AddonUpdateRequestChargeTypeNonRecurring string = "non_recurring"
)

// prop value enum
func (m *AddonUpdateRequest) validateChargeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addonUpdateRequestTypeChargeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddonUpdateRequest) validateChargeType(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChargeTypeEnum("charge_type", "body", m.ChargeType); err != nil {
		return err
	}

	return nil
}

var addonUpdateRequestTypePeriodUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["week","month","year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addonUpdateRequestTypePeriodUnitPropEnum = append(addonUpdateRequestTypePeriodUnitPropEnum, v)
	}
}

const (

	// AddonUpdateRequestPeriodUnitWeek captures enum value "week"
	AddonUpdateRequestPeriodUnitWeek string = "week"

	// AddonUpdateRequestPeriodUnitMonth captures enum value "month"
	AddonUpdateRequestPeriodUnitMonth string = "month"

	// AddonUpdateRequestPeriodUnitYear captures enum value "year"
	AddonUpdateRequestPeriodUnitYear string = "year"
)

// prop value enum
func (m *AddonUpdateRequest) validatePeriodUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addonUpdateRequestTypePeriodUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddonUpdateRequest) validatePeriodUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PeriodUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePeriodUnitEnum("period_unit", "body", m.PeriodUnit); err != nil {
		return err
	}

	return nil
}

var addonUpdateRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["card","paypal_express_checkout","amazon_payments","direct_debit","generic","alipay","unionpay","apple_pay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addonUpdateRequestTypeTypePropEnum = append(addonUpdateRequestTypeTypePropEnum, v)
	}
}

const (

	// AddonUpdateRequestTypeCard captures enum value "card"
	AddonUpdateRequestTypeCard string = "card"

	// AddonUpdateRequestTypePaypalExpressCheckout captures enum value "paypal_express_checkout"
	AddonUpdateRequestTypePaypalExpressCheckout string = "paypal_express_checkout"

	// AddonUpdateRequestTypeAmazonPayments captures enum value "amazon_payments"
	AddonUpdateRequestTypeAmazonPayments string = "amazon_payments"

	// AddonUpdateRequestTypeDirectDebit captures enum value "direct_debit"
	AddonUpdateRequestTypeDirectDebit string = "direct_debit"

	// AddonUpdateRequestTypeGeneric captures enum value "generic"
	AddonUpdateRequestTypeGeneric string = "generic"

	// AddonUpdateRequestTypeAlipay captures enum value "alipay"
	AddonUpdateRequestTypeAlipay string = "alipay"

	// AddonUpdateRequestTypeUnionpay captures enum value "unionpay"
	AddonUpdateRequestTypeUnionpay string = "unionpay"

	// AddonUpdateRequestTypeApplePay captures enum value "apple_pay"
	AddonUpdateRequestTypeApplePay string = "apple_pay"
)

// prop value enum
func (m *AddonUpdateRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addonUpdateRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddonUpdateRequest) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddonUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddonUpdateRequest) UnmarshalBinary(b []byte) error {
	var res AddonUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
