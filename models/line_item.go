// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LineItem line item
// swagger:model LineItem
type LineItem struct {

	// amount
	Amount int32 `json:"amount,omitempty"`

	// date from
	DateFrom int64 `json:"date_from,omitempty"`

	// date to
	DateTo int64 `json:"date_to,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// discount amount
	DiscountAmount int32 `json:"discount_amount,omitempty"`

	// entity id
	EntityID string `json:"entity_id,omitempty"`

	// entity type
	EntityType string `json:"entity_type,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is taxed
	IsTaxed bool `json:"is_taxed,omitempty"`

	// item level discount amount
	ItemLevelDiscountAmount int32 `json:"item_level_discount_amount,omitempty"`

	// quantity
	Quantity int32 `json:"quantity,omitempty"`

	// subscription id
	SubscriptionID string `json:"subscription_id,omitempty"`

	// tax amount
	TaxAmount int32 `json:"tax_amount,omitempty"`

	// tax exempt reason
	TaxExemptReason string `json:"tax_exempt_reason,omitempty"`

	// tax rate
	TaxRate float64 `json:"tax_rate,omitempty"`

	// unit amount
	UnitAmount int32 `json:"unit_amount,omitempty"`
}

// Validate validates this line item
func (m *LineItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaxExemptReason(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lineItemTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customer","subscription","invoice","credit_note","transaction","plan","addon","coupon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineItemTypeEntityTypePropEnum = append(lineItemTypeEntityTypePropEnum, v)
	}
}

const (

	// LineItemEntityTypeCustomer captures enum value "customer"
	LineItemEntityTypeCustomer string = "customer"

	// LineItemEntityTypeSubscription captures enum value "subscription"
	LineItemEntityTypeSubscription string = "subscription"

	// LineItemEntityTypeInvoice captures enum value "invoice"
	LineItemEntityTypeInvoice string = "invoice"

	// LineItemEntityTypeCreditNote captures enum value "credit_note"
	LineItemEntityTypeCreditNote string = "credit_note"

	// LineItemEntityTypeTransaction captures enum value "transaction"
	LineItemEntityTypeTransaction string = "transaction"

	// LineItemEntityTypePlan captures enum value "plan"
	LineItemEntityTypePlan string = "plan"

	// LineItemEntityTypeAddon captures enum value "addon"
	LineItemEntityTypeAddon string = "addon"

	// LineItemEntityTypeCoupon captures enum value "coupon"
	LineItemEntityTypeCoupon string = "coupon"
)

// prop value enum
func (m *LineItem) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lineItemTypeEntityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LineItem) validateEntityType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

var lineItemTypeTaxExemptReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tax_not_configured","region_non_taxable","export","customer_exempt","product_exempt","zero_rated","reverse_charge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineItemTypeTaxExemptReasonPropEnum = append(lineItemTypeTaxExemptReasonPropEnum, v)
	}
}

const (

	// LineItemTaxExemptReasonTaxNotConfigured captures enum value "tax_not_configured"
	LineItemTaxExemptReasonTaxNotConfigured string = "tax_not_configured"

	// LineItemTaxExemptReasonRegionNonTaxable captures enum value "region_non_taxable"
	LineItemTaxExemptReasonRegionNonTaxable string = "region_non_taxable"

	// LineItemTaxExemptReasonExport captures enum value "export"
	LineItemTaxExemptReasonExport string = "export"

	// LineItemTaxExemptReasonCustomerExempt captures enum value "customer_exempt"
	LineItemTaxExemptReasonCustomerExempt string = "customer_exempt"

	// LineItemTaxExemptReasonProductExempt captures enum value "product_exempt"
	LineItemTaxExemptReasonProductExempt string = "product_exempt"

	// LineItemTaxExemptReasonZeroRated captures enum value "zero_rated"
	LineItemTaxExemptReasonZeroRated string = "zero_rated"

	// LineItemTaxExemptReasonReverseCharge captures enum value "reverse_charge"
	LineItemTaxExemptReasonReverseCharge string = "reverse_charge"
)

// prop value enum
func (m *LineItem) validateTaxExemptReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lineItemTypeTaxExemptReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LineItem) validateTaxExemptReason(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxExemptReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaxExemptReasonEnum("tax_exempt_reason", "body", m.TaxExemptReason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LineItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LineItem) UnmarshalBinary(b []byte) error {
	var res LineItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
