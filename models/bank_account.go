// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankAccount bank account
// swagger:model BankAccount

type BankAccount struct {

	// account type
	AccountType string `json:"account_type,omitempty"`

	// bank name
	BankName string `json:"bank_name,omitempty"`

	// mandate id
	MandateID string `json:"mandate_id,omitempty"`

	// name on account
	NameOnAccount string `json:"name_on_account,omitempty"`
}

/* polymorph BankAccount account_type false */

/* polymorph BankAccount bank_name false */

/* polymorph BankAccount mandate_id false */

/* polymorph BankAccount name_on_account false */

// Validate validates this bank account
func (m *BankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bankAccountTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["checking","savings"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bankAccountTypeAccountTypePropEnum = append(bankAccountTypeAccountTypePropEnum, v)
	}
}

const (
	// BankAccountAccountTypeChecking captures enum value "checking"
	BankAccountAccountTypeChecking string = "checking"
	// BankAccountAccountTypeSavings captures enum value "savings"
	BankAccountAccountTypeSavings string = "savings"
)

// prop value enum
func (m *BankAccount) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bankAccountTypeAccountTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BankAccount) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountTypeEnum("account_type", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankAccount) UnmarshalBinary(b []byte) error {
	var res BankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
