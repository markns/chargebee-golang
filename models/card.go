// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Card card
// swagger:model Card
type Card struct {

	// billing addr1
	BillingAddr1 string `json:"billing_addr1,omitempty"`

	// billing addr2
	BillingAddr2 string `json:"billing_addr2,omitempty"`

	// billing city
	BillingCity string `json:"billing_city,omitempty"`

	// billing country
	BillingCountry string `json:"billing_country,omitempty"`

	// billing state
	BillingState string `json:"billing_state,omitempty"`

	// billing state code
	BillingStateCode string `json:"billing_state_code,omitempty"`

	// billing zip
	BillingZip string `json:"billing_zip,omitempty"`

	// brand
	Brand string `json:"brand,omitempty"`

	// expiry month
	ExpiryMonth int32 `json:"expiry_month,omitempty"`

	// expiry year
	ExpiryYear int32 `json:"expiry_year,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// funding type
	FundingType string `json:"funding_type,omitempty"`

	// iin
	Iin string `json:"iin,omitempty"`

	// last4
	Last4 string `json:"last4,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// masked number
	MaskedNumber string `json:"masked_number,omitempty"`
}

// Validate validates this card
func (m *Card) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrand(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFundingType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cardTypeBrandPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["visa","mastercard","american_express","discover","jcb","diners_club","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardTypeBrandPropEnum = append(cardTypeBrandPropEnum, v)
	}
}

const (

	// CardBrandVisa captures enum value "visa"
	CardBrandVisa string = "visa"

	// CardBrandMastercard captures enum value "mastercard"
	CardBrandMastercard string = "mastercard"

	// CardBrandAmericanExpress captures enum value "american_express"
	CardBrandAmericanExpress string = "american_express"

	// CardBrandDiscover captures enum value "discover"
	CardBrandDiscover string = "discover"

	// CardBrandJcb captures enum value "jcb"
	CardBrandJcb string = "jcb"

	// CardBrandDinersClub captures enum value "diners_club"
	CardBrandDinersClub string = "diners_club"

	// CardBrandOther captures enum value "other"
	CardBrandOther string = "other"
)

// prop value enum
func (m *Card) validateBrandEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cardTypeBrandPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Card) validateBrand(formats strfmt.Registry) error {

	if swag.IsZero(m.Brand) { // not required
		return nil
	}

	// value enum
	if err := m.validateBrandEnum("brand", "body", m.Brand); err != nil {
		return err
	}

	return nil
}

var cardTypeFundingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["credit","debit","prepaid","not_known","not_applicable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardTypeFundingTypePropEnum = append(cardTypeFundingTypePropEnum, v)
	}
}

const (

	// CardFundingTypeCredit captures enum value "credit"
	CardFundingTypeCredit string = "credit"

	// CardFundingTypeDebit captures enum value "debit"
	CardFundingTypeDebit string = "debit"

	// CardFundingTypePrepaid captures enum value "prepaid"
	CardFundingTypePrepaid string = "prepaid"

	// CardFundingTypeNotKnown captures enum value "not_known"
	CardFundingTypeNotKnown string = "not_known"

	// CardFundingTypeNotApplicable captures enum value "not_applicable"
	CardFundingTypeNotApplicable string = "not_applicable"
)

// prop value enum
func (m *Card) validateFundingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cardTypeFundingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Card) validateFundingType(formats strfmt.Registry) error {

	if swag.IsZero(m.FundingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFundingTypeEnum("funding_type", "body", m.FundingType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Card) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Card) UnmarshalBinary(b []byte) error {
	var res Card
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
