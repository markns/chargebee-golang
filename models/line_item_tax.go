// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LineItemTax line item tax
// swagger:model LineItemTax
type LineItemTax struct {

	// line item id
	LineItemID string `json:"line_item_id,omitempty"`

	// tax amount
	TaxAmount int32 `json:"tax_amount,omitempty"`

	// tax juris code
	TaxJurisCode string `json:"tax_juris_code,omitempty"`

	// tax juris name
	TaxJurisName string `json:"tax_juris_name,omitempty"`

	// tax juris type
	TaxJurisType string `json:"tax_juris_type,omitempty"`

	// tax name
	TaxName string `json:"tax_name,omitempty"`

	// tax rate
	TaxRate float64 `json:"tax_rate,omitempty"`
}

// Validate validates this line item tax
func (m *LineItemTax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaxJurisType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lineItemTaxTypeTaxJurisTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["country","state","county","city","special","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineItemTaxTypeTaxJurisTypePropEnum = append(lineItemTaxTypeTaxJurisTypePropEnum, v)
	}
}

const (

	// LineItemTaxTaxJurisTypeCountry captures enum value "country"
	LineItemTaxTaxJurisTypeCountry string = "country"

	// LineItemTaxTaxJurisTypeState captures enum value "state"
	LineItemTaxTaxJurisTypeState string = "state"

	// LineItemTaxTaxJurisTypeCounty captures enum value "county"
	LineItemTaxTaxJurisTypeCounty string = "county"

	// LineItemTaxTaxJurisTypeCity captures enum value "city"
	LineItemTaxTaxJurisTypeCity string = "city"

	// LineItemTaxTaxJurisTypeSpecial captures enum value "special"
	LineItemTaxTaxJurisTypeSpecial string = "special"

	// LineItemTaxTaxJurisTypeOther captures enum value "other"
	LineItemTaxTaxJurisTypeOther string = "other"
)

// prop value enum
func (m *LineItemTax) validateTaxJurisTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, lineItemTaxTypeTaxJurisTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LineItemTax) validateTaxJurisType(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxJurisType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaxJurisTypeEnum("tax_juris_type", "body", m.TaxJurisType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LineItemTax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LineItemTax) UnmarshalBinary(b []byte) error {
	var res LineItemTax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
