// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditNoteRecordRefundRequest credit note record refund request
// swagger:model CreditNoteRecordRefundRequest

type CreditNoteRecordRefundRequest struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// transaction amount
	TransactionAmount int32 `json:"transaction[amount],omitempty"`

	// transaction date
	TransactionDate int64 `json:"transaction[date],omitempty"`

	// transaction payment method
	TransactionPaymentMethod string `json:"transaction[payment_method],omitempty"`

	// transaction reference number
	TransactionReferenceNumber string `json:"transaction[reference_number],omitempty"`
}

/* polymorph CreditNoteRecordRefundRequest comment false */

/* polymorph CreditNoteRecordRefundRequest transaction[amount] false */

/* polymorph CreditNoteRecordRefundRequest transaction[date] false */

/* polymorph CreditNoteRecordRefundRequest transaction[payment_method] false */

/* polymorph CreditNoteRecordRefundRequest transaction[reference_number] false */

// Validate validates this credit note record refund request
func (m *CreditNoteRecordRefundRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransactionPaymentMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var creditNoteRecordRefundRequestTypeTransactionPaymentMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["card","cash","check","chargeback","bank_transfer","amazon_payments","paypal_express_checkout","direct_debit","alipay","unionpay","apple_pay","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditNoteRecordRefundRequestTypeTransactionPaymentMethodPropEnum = append(creditNoteRecordRefundRequestTypeTransactionPaymentMethodPropEnum, v)
	}
}

const (
	// CreditNoteRecordRefundRequestTransactionPaymentMethodCard captures enum value "card"
	CreditNoteRecordRefundRequestTransactionPaymentMethodCard string = "card"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodCash captures enum value "cash"
	CreditNoteRecordRefundRequestTransactionPaymentMethodCash string = "cash"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodCheck captures enum value "check"
	CreditNoteRecordRefundRequestTransactionPaymentMethodCheck string = "check"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodChargeback captures enum value "chargeback"
	CreditNoteRecordRefundRequestTransactionPaymentMethodChargeback string = "chargeback"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodBankTransfer captures enum value "bank_transfer"
	CreditNoteRecordRefundRequestTransactionPaymentMethodBankTransfer string = "bank_transfer"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodAmazonPayments captures enum value "amazon_payments"
	CreditNoteRecordRefundRequestTransactionPaymentMethodAmazonPayments string = "amazon_payments"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodPaypalExpressCheckout captures enum value "paypal_express_checkout"
	CreditNoteRecordRefundRequestTransactionPaymentMethodPaypalExpressCheckout string = "paypal_express_checkout"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodDirectDebit captures enum value "direct_debit"
	CreditNoteRecordRefundRequestTransactionPaymentMethodDirectDebit string = "direct_debit"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodAlipay captures enum value "alipay"
	CreditNoteRecordRefundRequestTransactionPaymentMethodAlipay string = "alipay"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodUnionpay captures enum value "unionpay"
	CreditNoteRecordRefundRequestTransactionPaymentMethodUnionpay string = "unionpay"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodApplePay captures enum value "apple_pay"
	CreditNoteRecordRefundRequestTransactionPaymentMethodApplePay string = "apple_pay"
	// CreditNoteRecordRefundRequestTransactionPaymentMethodOther captures enum value "other"
	CreditNoteRecordRefundRequestTransactionPaymentMethodOther string = "other"
)

// prop value enum
func (m *CreditNoteRecordRefundRequest) validateTransactionPaymentMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creditNoteRecordRefundRequestTypeTransactionPaymentMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreditNoteRecordRefundRequest) validateTransactionPaymentMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionPaymentMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransactionPaymentMethodEnum("transaction[payment_method]", "body", m.TransactionPaymentMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditNoteRecordRefundRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditNoteRecordRefundRequest) UnmarshalBinary(b []byte) error {
	var res CreditNoteRecordRefundRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
