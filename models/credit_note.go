// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditNote credit note
// swagger:model CreditNote
type CreditNote struct {

	// allocations
	Allocations []*Allocation `json:"allocations"`

	// amount allocated
	AmountAllocated int32 `json:"amount_allocated,omitempty"`

	// amount available
	AmountAvailable int32 `json:"amount_available,omitempty"`

	// amount refunded
	AmountRefunded int32 `json:"amount_refunded,omitempty"`

	// currency code
	CurrencyCode string `json:"currency_code,omitempty"`

	// customer id
	CustomerID string `json:"customer_id,omitempty"`

	// date
	Date int64 `json:"date,omitempty"`

	// deleted
	Deleted bool `json:"deleted,omitempty"`

	// discounts
	Discounts []*Discount `json:"discounts"`

	// id
	ID string `json:"id,omitempty"`

	// line item discounts
	LineItemDiscounts []*LineItemDiscount `json:"line_item_discounts"`

	// line item taxes
	LineItemTaxes []*LineItemTax `json:"line_item_taxes"`

	// line items
	LineItems []*LineItem `json:"line_items"`

	// linked refunds
	LinkedRefunds []*LinkedRefund `json:"linked_refunds"`

	// price type
	PriceType string `json:"price_type,omitempty"`

	// reason code
	ReasonCode string `json:"reason_code,omitempty"`

	// reference invoice id
	ReferenceInvoiceID string `json:"reference_invoice_id,omitempty"`

	// refunded at
	RefundedAt int64 `json:"refunded_at,omitempty"`

	// resource version
	ResourceVersion int64 `json:"resource_version,omitempty"`

	// round off amount
	RoundOffAmount int32 `json:"round_off_amount,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// sub total
	SubTotal int32 `json:"sub_total,omitempty"`

	// subscription id
	SubscriptionID string `json:"subscription_id,omitempty"`

	// taxes
	Taxes []*Tax `json:"taxes"`

	// total
	Total int32 `json:"total,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// vat number
	VatNumber string `json:"vat_number,omitempty"`

	// voided at
	VoidedAt int64 `json:"voided_at,omitempty"`
}

// Validate validates this credit note
func (m *CreditNote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiscounts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLineItemDiscounts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLineItemTaxes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLineItems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinkedRefunds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReasonCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaxes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditNote) validateAllocations(formats strfmt.Registry) error {

	if swag.IsZero(m.Allocations) { // not required
		return nil
	}

	for i := 0; i < len(m.Allocations); i++ {

		if swag.IsZero(m.Allocations[i]) { // not required
			continue
		}

		if m.Allocations[i] != nil {

			if err := m.Allocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allocations" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *CreditNote) validateDiscounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Discounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Discounts); i++ {

		if swag.IsZero(m.Discounts[i]) { // not required
			continue
		}

		if m.Discounts[i] != nil {

			if err := m.Discounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discounts" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *CreditNote) validateLineItemDiscounts(formats strfmt.Registry) error {

	if swag.IsZero(m.LineItemDiscounts) { // not required
		return nil
	}

	for i := 0; i < len(m.LineItemDiscounts); i++ {

		if swag.IsZero(m.LineItemDiscounts[i]) { // not required
			continue
		}

		if m.LineItemDiscounts[i] != nil {

			if err := m.LineItemDiscounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("line_item_discounts" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *CreditNote) validateLineItemTaxes(formats strfmt.Registry) error {

	if swag.IsZero(m.LineItemTaxes) { // not required
		return nil
	}

	for i := 0; i < len(m.LineItemTaxes); i++ {

		if swag.IsZero(m.LineItemTaxes[i]) { // not required
			continue
		}

		if m.LineItemTaxes[i] != nil {

			if err := m.LineItemTaxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("line_item_taxes" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *CreditNote) validateLineItems(formats strfmt.Registry) error {

	if swag.IsZero(m.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.LineItems); i++ {

		if swag.IsZero(m.LineItems[i]) { // not required
			continue
		}

		if m.LineItems[i] != nil {

			if err := m.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("line_items" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *CreditNote) validateLinkedRefunds(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkedRefunds) { // not required
		return nil
	}

	for i := 0; i < len(m.LinkedRefunds); i++ {

		if swag.IsZero(m.LinkedRefunds[i]) { // not required
			continue
		}

		if m.LinkedRefunds[i] != nil {

			if err := m.LinkedRefunds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linked_refunds" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

var creditNoteTypePriceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tax_exclusive","tax_inclusive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditNoteTypePriceTypePropEnum = append(creditNoteTypePriceTypePropEnum, v)
	}
}

const (

	// CreditNotePriceTypeTaxExclusive captures enum value "tax_exclusive"
	CreditNotePriceTypeTaxExclusive string = "tax_exclusive"

	// CreditNotePriceTypeTaxInclusive captures enum value "tax_inclusive"
	CreditNotePriceTypeTaxInclusive string = "tax_inclusive"
)

// prop value enum
func (m *CreditNote) validatePriceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creditNoteTypePriceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreditNote) validatePriceType(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriceTypeEnum("price_type", "body", m.PriceType); err != nil {
		return err
	}

	return nil
}

var creditNoteTypeReasonCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["write_off","subscription_change","subscription_cancellation","chargeback","product_unsatisfactory","service_unsatisfactory","order_change","order_cancellation","waiver","other","fraudulent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditNoteTypeReasonCodePropEnum = append(creditNoteTypeReasonCodePropEnum, v)
	}
}

const (

	// CreditNoteReasonCodeWriteOff captures enum value "write_off"
	CreditNoteReasonCodeWriteOff string = "write_off"

	// CreditNoteReasonCodeSubscriptionChange captures enum value "subscription_change"
	CreditNoteReasonCodeSubscriptionChange string = "subscription_change"

	// CreditNoteReasonCodeSubscriptionCancellation captures enum value "subscription_cancellation"
	CreditNoteReasonCodeSubscriptionCancellation string = "subscription_cancellation"

	// CreditNoteReasonCodeChargeback captures enum value "chargeback"
	CreditNoteReasonCodeChargeback string = "chargeback"

	// CreditNoteReasonCodeProductUnsatisfactory captures enum value "product_unsatisfactory"
	CreditNoteReasonCodeProductUnsatisfactory string = "product_unsatisfactory"

	// CreditNoteReasonCodeServiceUnsatisfactory captures enum value "service_unsatisfactory"
	CreditNoteReasonCodeServiceUnsatisfactory string = "service_unsatisfactory"

	// CreditNoteReasonCodeOrderChange captures enum value "order_change"
	CreditNoteReasonCodeOrderChange string = "order_change"

	// CreditNoteReasonCodeOrderCancellation captures enum value "order_cancellation"
	CreditNoteReasonCodeOrderCancellation string = "order_cancellation"

	// CreditNoteReasonCodeWaiver captures enum value "waiver"
	CreditNoteReasonCodeWaiver string = "waiver"

	// CreditNoteReasonCodeOther captures enum value "other"
	CreditNoteReasonCodeOther string = "other"

	// CreditNoteReasonCodeFraudulent captures enum value "fraudulent"
	CreditNoteReasonCodeFraudulent string = "fraudulent"
)

// prop value enum
func (m *CreditNote) validateReasonCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creditNoteTypeReasonCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreditNote) validateReasonCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReasonCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonCodeEnum("reason_code", "body", m.ReasonCode); err != nil {
		return err
	}

	return nil
}

var creditNoteTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["future","in_trial","active","non_renewing","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditNoteTypeStatusPropEnum = append(creditNoteTypeStatusPropEnum, v)
	}
}

const (

	// CreditNoteStatusFuture captures enum value "future"
	CreditNoteStatusFuture string = "future"

	// CreditNoteStatusInTrial captures enum value "in_trial"
	CreditNoteStatusInTrial string = "in_trial"

	// CreditNoteStatusActive captures enum value "active"
	CreditNoteStatusActive string = "active"

	// CreditNoteStatusNonRenewing captures enum value "non_renewing"
	CreditNoteStatusNonRenewing string = "non_renewing"

	// CreditNoteStatusCancelled captures enum value "cancelled"
	CreditNoteStatusCancelled string = "cancelled"
)

// prop value enum
func (m *CreditNote) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creditNoteTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreditNote) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CreditNote) validateTaxes(formats strfmt.Registry) error {

	if swag.IsZero(m.Taxes) { // not required
		return nil
	}

	for i := 0; i < len(m.Taxes); i++ {

		if swag.IsZero(m.Taxes[i]) { // not required
			continue
		}

		if m.Taxes[i] != nil {

			if err := m.Taxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxes" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

var creditNoteTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["card","paypal_express_checkout","amazon_payments","direct_debit","generic","alipay","unionpay","apple_pay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditNoteTypeTypePropEnum = append(creditNoteTypeTypePropEnum, v)
	}
}

const (

	// CreditNoteTypeCard captures enum value "card"
	CreditNoteTypeCard string = "card"

	// CreditNoteTypePaypalExpressCheckout captures enum value "paypal_express_checkout"
	CreditNoteTypePaypalExpressCheckout string = "paypal_express_checkout"

	// CreditNoteTypeAmazonPayments captures enum value "amazon_payments"
	CreditNoteTypeAmazonPayments string = "amazon_payments"

	// CreditNoteTypeDirectDebit captures enum value "direct_debit"
	CreditNoteTypeDirectDebit string = "direct_debit"

	// CreditNoteTypeGeneric captures enum value "generic"
	CreditNoteTypeGeneric string = "generic"

	// CreditNoteTypeAlipay captures enum value "alipay"
	CreditNoteTypeAlipay string = "alipay"

	// CreditNoteTypeUnionpay captures enum value "unionpay"
	CreditNoteTypeUnionpay string = "unionpay"

	// CreditNoteTypeApplePay captures enum value "apple_pay"
	CreditNoteTypeApplePay string = "apple_pay"
)

// prop value enum
func (m *CreditNote) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creditNoteTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreditNote) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditNote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditNote) UnmarshalBinary(b []byte) error {
	var res CreditNote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
