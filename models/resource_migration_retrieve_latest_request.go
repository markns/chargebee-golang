// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceMigrationRetrieveLatestRequest resource migration retrieve latest request
// swagger:model ResourceMigrationRetrieveLatestRequest

type ResourceMigrationRetrieveLatestRequest struct {

	// entity id
	EntityID string `json:"entity_id,omitempty"`

	// entity type
	EntityType string `json:"entity_type,omitempty"`

	// from site
	FromSite string `json:"from_site,omitempty"`
}

/* polymorph ResourceMigrationRetrieveLatestRequest entity_id false */

/* polymorph ResourceMigrationRetrieveLatestRequest entity_type false */

/* polymorph ResourceMigrationRetrieveLatestRequest from_site false */

// Validate validates this resource migration retrieve latest request
func (m *ResourceMigrationRetrieveLatestRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceMigrationRetrieveLatestRequestTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customer","subscription","invoice","credit_note","transaction","plan","addon","coupon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceMigrationRetrieveLatestRequestTypeEntityTypePropEnum = append(resourceMigrationRetrieveLatestRequestTypeEntityTypePropEnum, v)
	}
}

const (
	// ResourceMigrationRetrieveLatestRequestEntityTypeCustomer captures enum value "customer"
	ResourceMigrationRetrieveLatestRequestEntityTypeCustomer string = "customer"
	// ResourceMigrationRetrieveLatestRequestEntityTypeSubscription captures enum value "subscription"
	ResourceMigrationRetrieveLatestRequestEntityTypeSubscription string = "subscription"
	// ResourceMigrationRetrieveLatestRequestEntityTypeInvoice captures enum value "invoice"
	ResourceMigrationRetrieveLatestRequestEntityTypeInvoice string = "invoice"
	// ResourceMigrationRetrieveLatestRequestEntityTypeCreditNote captures enum value "credit_note"
	ResourceMigrationRetrieveLatestRequestEntityTypeCreditNote string = "credit_note"
	// ResourceMigrationRetrieveLatestRequestEntityTypeTransaction captures enum value "transaction"
	ResourceMigrationRetrieveLatestRequestEntityTypeTransaction string = "transaction"
	// ResourceMigrationRetrieveLatestRequestEntityTypePlan captures enum value "plan"
	ResourceMigrationRetrieveLatestRequestEntityTypePlan string = "plan"
	// ResourceMigrationRetrieveLatestRequestEntityTypeAddon captures enum value "addon"
	ResourceMigrationRetrieveLatestRequestEntityTypeAddon string = "addon"
	// ResourceMigrationRetrieveLatestRequestEntityTypeCoupon captures enum value "coupon"
	ResourceMigrationRetrieveLatestRequestEntityTypeCoupon string = "coupon"
)

// prop value enum
func (m *ResourceMigrationRetrieveLatestRequest) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceMigrationRetrieveLatestRequestTypeEntityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceMigrationRetrieveLatestRequest) validateEntityType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceMigrationRetrieveLatestRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceMigrationRetrieveLatestRequest) UnmarshalBinary(b []byte) error {
	var res ResourceMigrationRetrieveLatestRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
