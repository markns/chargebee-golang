// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Estimate estimate
// swagger:model Estimate
type Estimate struct {

	// created at
	CreatedAt int64 `json:"created_at,omitempty"`

	// credit note estimates
	CreditNoteEstimates []*CreditNoteEstimate `json:"credit_note_estimates"`

	// invoice estimate
	InvoiceEstimate *InvoiceEstimate `json:"invoice_estimate,omitempty"`

	// invoice estimates
	InvoiceEstimates []*InvoiceEstimate `json:"invoice_estimates"`

	// next invoice estimate
	NextInvoiceEstimate *InvoiceEstimate `json:"next_invoice_estimate,omitempty"`

	// subscription estimate
	SubscriptionEstimate *SubscriptionEstimate `json:"subscription_estimate,omitempty"`

	// unbilled charge estimates
	UnbilledChargeEstimates []*UnbilledCharge `json:"unbilled_charge_estimates"`
}

// Validate validates this estimate
func (m *Estimate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditNoteEstimates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceEstimate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceEstimates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNextInvoiceEstimate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubscriptionEstimate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnbilledChargeEstimates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Estimate) validateCreditNoteEstimates(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditNoteEstimates) { // not required
		return nil
	}

	for i := 0; i < len(m.CreditNoteEstimates); i++ {

		if swag.IsZero(m.CreditNoteEstimates[i]) { // not required
			continue
		}

		if m.CreditNoteEstimates[i] != nil {

			if err := m.CreditNoteEstimates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credit_note_estimates" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Estimate) validateInvoiceEstimate(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceEstimate) { // not required
		return nil
	}

	if m.InvoiceEstimate != nil {

		if err := m.InvoiceEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoice_estimate")
			}
			return err
		}

	}

	return nil
}

func (m *Estimate) validateInvoiceEstimates(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceEstimates) { // not required
		return nil
	}

	for i := 0; i < len(m.InvoiceEstimates); i++ {

		if swag.IsZero(m.InvoiceEstimates[i]) { // not required
			continue
		}

		if m.InvoiceEstimates[i] != nil {

			if err := m.InvoiceEstimates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invoice_estimates" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Estimate) validateNextInvoiceEstimate(formats strfmt.Registry) error {

	if swag.IsZero(m.NextInvoiceEstimate) { // not required
		return nil
	}

	if m.NextInvoiceEstimate != nil {

		if err := m.NextInvoiceEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_invoice_estimate")
			}
			return err
		}

	}

	return nil
}

func (m *Estimate) validateSubscriptionEstimate(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionEstimate) { // not required
		return nil
	}

	if m.SubscriptionEstimate != nil {

		if err := m.SubscriptionEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription_estimate")
			}
			return err
		}

	}

	return nil
}

func (m *Estimate) validateUnbilledChargeEstimates(formats strfmt.Registry) error {

	if swag.IsZero(m.UnbilledChargeEstimates) { // not required
		return nil
	}

	for i := 0; i < len(m.UnbilledChargeEstimates); i++ {

		if swag.IsZero(m.UnbilledChargeEstimates[i]) { // not required
			continue
		}

		if m.UnbilledChargeEstimates[i] != nil {

			if err := m.UnbilledChargeEstimates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unbilled_charge_estimates" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Estimate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Estimate) UnmarshalBinary(b []byte) error {
	var res Estimate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
