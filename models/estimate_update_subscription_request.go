// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EstimateUpdateSubscriptionRequest estimate update subscription request
// swagger:model EstimateUpdateSubscriptionRequest
type EstimateUpdateSubscriptionRequest struct {

	// billing address city
	BillingAddressCity string `json:"billing_address[city],omitempty"`

	// billing address country
	BillingAddressCountry string `json:"billing_address[country],omitempty"`

	// billing address line1
	BillingAddressLine1 string `json:"billing_address[line1],omitempty"`

	// billing address line2
	BillingAddressLine2 string `json:"billing_address[line2],omitempty"`

	// billing address line3
	BillingAddressLine3 string `json:"billing_address[line3],omitempty"`

	// billing address state code
	BillingAddressStateCode string `json:"billing_address[state_code],omitempty"`

	// billing address validation status
	BillingAddressValidationStatus string `json:"billing_address[validation_status],omitempty"`

	// billing address zip
	BillingAddressZip string `json:"billing_address[zip],omitempty"`

	// billing alignment mode
	BillingAlignmentMode string `json:"billing_alignment_mode,omitempty"`

	// billing cycles
	BillingCycles int32 `json:"billing_cycles,omitempty"`

	// coupon ids
	CouponIds string `json:"coupon_ids,omitempty"`

	// customer registered for gst
	CustomerRegisteredForGst bool `json:"customer[registered_for_gst],omitempty"`

	// customer taxability
	CustomerTaxability string `json:"customer[taxability],omitempty"`

	// customer vat number
	CustomerVatNumber string `json:"customer[vat_number],omitempty"`

	// end of term
	EndOfTerm bool `json:"end_of_term,omitempty"`

	// force term reset
	ForceTermReset bool `json:"force_term_reset,omitempty"`

	// include delayed charges
	IncludeDelayedCharges bool `json:"include_delayed_charges,omitempty"`

	// invoice immediately
	InvoiceImmediately bool `json:"invoice_immediately,omitempty"`

	// prorate
	Prorate bool `json:"prorate,omitempty"`

	// reactivate
	Reactivate bool `json:"reactivate,omitempty"`

	// reactivate from
	ReactivateFrom int64 `json:"reactivate_from,omitempty"`

	// replace addon list
	ReplaceAddonList bool `json:"replace_addon_list,omitempty"`

	// replace coupon list
	ReplaceCouponList bool `json:"replace_coupon_list,omitempty"`

	// shipping address city
	ShippingAddressCity string `json:"shipping_address[city],omitempty"`

	// shipping address country
	ShippingAddressCountry string `json:"shipping_address[country],omitempty"`

	// shipping address line1
	ShippingAddressLine1 string `json:"shipping_address[line1],omitempty"`

	// shipping address line2
	ShippingAddressLine2 string `json:"shipping_address[line2],omitempty"`

	// shipping address line3
	ShippingAddressLine3 string `json:"shipping_address[line3],omitempty"`

	// shipping address state code
	ShippingAddressStateCode string `json:"shipping_address[state_code],omitempty"`

	// shipping address validation status
	ShippingAddressValidationStatus string `json:"shipping_address[validation_status],omitempty"`

	// shipping address zip
	ShippingAddressZip string `json:"shipping_address[zip],omitempty"`

	// subscription coupon
	SubscriptionCoupon string `json:"subscription[coupon],omitempty"`

	// subscription id
	SubscriptionID string `json:"subscription[id],omitempty"`

	// subscription plan id
	SubscriptionPlanID string `json:"subscription[plan_id],omitempty"`

	// subscription plan quantity
	SubscriptionPlanQuantity int32 `json:"subscription[plan_quantity],omitempty"`

	// subscription plan unit price
	SubscriptionPlanUnitPrice int32 `json:"subscription[plan_unit_price],omitempty"`

	// subscription setup fee
	SubscriptionSetupFee int32 `json:"subscription[setup_fee],omitempty"`

	// subscription start date
	SubscriptionStartDate int64 `json:"subscription[start_date],omitempty"`

	// subscription trial end
	SubscriptionTrialEnd int64 `json:"subscription[trial_end],omitempty"`

	// terms to charge
	TermsToCharge int32 `json:"terms_to_charge,omitempty"`

	// use existing balances
	UseExistingBalances bool `json:"use_existing_balances,omitempty"`
}

// Validate validates this estimate update subscription request
func (m *EstimateUpdateSubscriptionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingAddressValidationStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBillingAlignmentMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomerTaxability(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShippingAddressValidationStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var estimateUpdateSubscriptionRequestTypeBillingAddressValidationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not_validated","valid","partially_valid","invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		estimateUpdateSubscriptionRequestTypeBillingAddressValidationStatusPropEnum = append(estimateUpdateSubscriptionRequestTypeBillingAddressValidationStatusPropEnum, v)
	}
}

const (

	// EstimateUpdateSubscriptionRequestBillingAddressValidationStatusNotValidated captures enum value "not_validated"
	EstimateUpdateSubscriptionRequestBillingAddressValidationStatusNotValidated string = "not_validated"

	// EstimateUpdateSubscriptionRequestBillingAddressValidationStatusValid captures enum value "valid"
	EstimateUpdateSubscriptionRequestBillingAddressValidationStatusValid string = "valid"

	// EstimateUpdateSubscriptionRequestBillingAddressValidationStatusPartiallyValid captures enum value "partially_valid"
	EstimateUpdateSubscriptionRequestBillingAddressValidationStatusPartiallyValid string = "partially_valid"

	// EstimateUpdateSubscriptionRequestBillingAddressValidationStatusInvalid captures enum value "invalid"
	EstimateUpdateSubscriptionRequestBillingAddressValidationStatusInvalid string = "invalid"
)

// prop value enum
func (m *EstimateUpdateSubscriptionRequest) validateBillingAddressValidationStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, estimateUpdateSubscriptionRequestTypeBillingAddressValidationStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EstimateUpdateSubscriptionRequest) validateBillingAddressValidationStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAddressValidationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingAddressValidationStatusEnum("billing_address[validation_status]", "body", m.BillingAddressValidationStatus); err != nil {
		return err
	}

	return nil
}

var estimateUpdateSubscriptionRequestTypeBillingAlignmentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		estimateUpdateSubscriptionRequestTypeBillingAlignmentModePropEnum = append(estimateUpdateSubscriptionRequestTypeBillingAlignmentModePropEnum, v)
	}
}

const (

	// EstimateUpdateSubscriptionRequestBillingAlignmentModeImmediate captures enum value "immediate"
	EstimateUpdateSubscriptionRequestBillingAlignmentModeImmediate string = "immediate"

	// EstimateUpdateSubscriptionRequestBillingAlignmentModeDelayed captures enum value "delayed"
	EstimateUpdateSubscriptionRequestBillingAlignmentModeDelayed string = "delayed"
)

// prop value enum
func (m *EstimateUpdateSubscriptionRequest) validateBillingAlignmentModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, estimateUpdateSubscriptionRequestTypeBillingAlignmentModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EstimateUpdateSubscriptionRequest) validateBillingAlignmentMode(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingAlignmentMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingAlignmentModeEnum("billing_alignment_mode", "body", m.BillingAlignmentMode); err != nil {
		return err
	}

	return nil
}

var estimateUpdateSubscriptionRequestTypeCustomerTaxabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["taxable","exempt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		estimateUpdateSubscriptionRequestTypeCustomerTaxabilityPropEnum = append(estimateUpdateSubscriptionRequestTypeCustomerTaxabilityPropEnum, v)
	}
}

const (

	// EstimateUpdateSubscriptionRequestCustomerTaxabilityTaxable captures enum value "taxable"
	EstimateUpdateSubscriptionRequestCustomerTaxabilityTaxable string = "taxable"

	// EstimateUpdateSubscriptionRequestCustomerTaxabilityExempt captures enum value "exempt"
	EstimateUpdateSubscriptionRequestCustomerTaxabilityExempt string = "exempt"
)

// prop value enum
func (m *EstimateUpdateSubscriptionRequest) validateCustomerTaxabilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, estimateUpdateSubscriptionRequestTypeCustomerTaxabilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EstimateUpdateSubscriptionRequest) validateCustomerTaxability(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerTaxability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCustomerTaxabilityEnum("customer[taxability]", "body", m.CustomerTaxability); err != nil {
		return err
	}

	return nil
}

var estimateUpdateSubscriptionRequestTypeShippingAddressValidationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["not_validated","valid","partially_valid","invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		estimateUpdateSubscriptionRequestTypeShippingAddressValidationStatusPropEnum = append(estimateUpdateSubscriptionRequestTypeShippingAddressValidationStatusPropEnum, v)
	}
}

const (

	// EstimateUpdateSubscriptionRequestShippingAddressValidationStatusNotValidated captures enum value "not_validated"
	EstimateUpdateSubscriptionRequestShippingAddressValidationStatusNotValidated string = "not_validated"

	// EstimateUpdateSubscriptionRequestShippingAddressValidationStatusValid captures enum value "valid"
	EstimateUpdateSubscriptionRequestShippingAddressValidationStatusValid string = "valid"

	// EstimateUpdateSubscriptionRequestShippingAddressValidationStatusPartiallyValid captures enum value "partially_valid"
	EstimateUpdateSubscriptionRequestShippingAddressValidationStatusPartiallyValid string = "partially_valid"

	// EstimateUpdateSubscriptionRequestShippingAddressValidationStatusInvalid captures enum value "invalid"
	EstimateUpdateSubscriptionRequestShippingAddressValidationStatusInvalid string = "invalid"
)

// prop value enum
func (m *EstimateUpdateSubscriptionRequest) validateShippingAddressValidationStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, estimateUpdateSubscriptionRequestTypeShippingAddressValidationStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EstimateUpdateSubscriptionRequest) validateShippingAddressValidationStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingAddressValidationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateShippingAddressValidationStatusEnum("shipping_address[validation_status]", "body", m.ShippingAddressValidationStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EstimateUpdateSubscriptionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EstimateUpdateSubscriptionRequest) UnmarshalBinary(b []byte) error {
	var res EstimateUpdateSubscriptionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
