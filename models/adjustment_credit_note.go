// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdjustmentCreditNote adjustment credit note
// swagger:model AdjustmentCreditNote

type AdjustmentCreditNote struct {

	// cn date
	CnDate int64 `json:"cn_date,omitempty"`

	// cn id
	CnID string `json:"cn_id,omitempty"`

	// cn reason code
	CnReasonCode string `json:"cn_reason_code,omitempty"`

	// cn status
	CnStatus string `json:"cn_status,omitempty"`

	// cn total
	CnTotal int32 `json:"cn_total,omitempty"`
}

/* polymorph AdjustmentCreditNote cn_date false */

/* polymorph AdjustmentCreditNote cn_id false */

/* polymorph AdjustmentCreditNote cn_reason_code false */

/* polymorph AdjustmentCreditNote cn_status false */

/* polymorph AdjustmentCreditNote cn_total false */

// Validate validates this adjustment credit note
func (m *AdjustmentCreditNote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCnReasonCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCnStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var adjustmentCreditNoteTypeCnReasonCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["write_off","subscription_change","subscription_cancellation","chargeback","product_unsatisfactory","service_unsatisfactory","order_change","order_cancellation","waiver","other","fraudulent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adjustmentCreditNoteTypeCnReasonCodePropEnum = append(adjustmentCreditNoteTypeCnReasonCodePropEnum, v)
	}
}

const (
	// AdjustmentCreditNoteCnReasonCodeWriteOff captures enum value "write_off"
	AdjustmentCreditNoteCnReasonCodeWriteOff string = "write_off"
	// AdjustmentCreditNoteCnReasonCodeSubscriptionChange captures enum value "subscription_change"
	AdjustmentCreditNoteCnReasonCodeSubscriptionChange string = "subscription_change"
	// AdjustmentCreditNoteCnReasonCodeSubscriptionCancellation captures enum value "subscription_cancellation"
	AdjustmentCreditNoteCnReasonCodeSubscriptionCancellation string = "subscription_cancellation"
	// AdjustmentCreditNoteCnReasonCodeChargeback captures enum value "chargeback"
	AdjustmentCreditNoteCnReasonCodeChargeback string = "chargeback"
	// AdjustmentCreditNoteCnReasonCodeProductUnsatisfactory captures enum value "product_unsatisfactory"
	AdjustmentCreditNoteCnReasonCodeProductUnsatisfactory string = "product_unsatisfactory"
	// AdjustmentCreditNoteCnReasonCodeServiceUnsatisfactory captures enum value "service_unsatisfactory"
	AdjustmentCreditNoteCnReasonCodeServiceUnsatisfactory string = "service_unsatisfactory"
	// AdjustmentCreditNoteCnReasonCodeOrderChange captures enum value "order_change"
	AdjustmentCreditNoteCnReasonCodeOrderChange string = "order_change"
	// AdjustmentCreditNoteCnReasonCodeOrderCancellation captures enum value "order_cancellation"
	AdjustmentCreditNoteCnReasonCodeOrderCancellation string = "order_cancellation"
	// AdjustmentCreditNoteCnReasonCodeWaiver captures enum value "waiver"
	AdjustmentCreditNoteCnReasonCodeWaiver string = "waiver"
	// AdjustmentCreditNoteCnReasonCodeOther captures enum value "other"
	AdjustmentCreditNoteCnReasonCodeOther string = "other"
	// AdjustmentCreditNoteCnReasonCodeFraudulent captures enum value "fraudulent"
	AdjustmentCreditNoteCnReasonCodeFraudulent string = "fraudulent"
)

// prop value enum
func (m *AdjustmentCreditNote) validateCnReasonCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, adjustmentCreditNoteTypeCnReasonCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AdjustmentCreditNote) validateCnReasonCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CnReasonCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateCnReasonCodeEnum("cn_reason_code", "body", m.CnReasonCode); err != nil {
		return err
	}

	return nil
}

var adjustmentCreditNoteTypeCnStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["future","in_trial","active","non_renewing","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		adjustmentCreditNoteTypeCnStatusPropEnum = append(adjustmentCreditNoteTypeCnStatusPropEnum, v)
	}
}

const (
	// AdjustmentCreditNoteCnStatusFuture captures enum value "future"
	AdjustmentCreditNoteCnStatusFuture string = "future"
	// AdjustmentCreditNoteCnStatusInTrial captures enum value "in_trial"
	AdjustmentCreditNoteCnStatusInTrial string = "in_trial"
	// AdjustmentCreditNoteCnStatusActive captures enum value "active"
	AdjustmentCreditNoteCnStatusActive string = "active"
	// AdjustmentCreditNoteCnStatusNonRenewing captures enum value "non_renewing"
	AdjustmentCreditNoteCnStatusNonRenewing string = "non_renewing"
	// AdjustmentCreditNoteCnStatusCancelled captures enum value "cancelled"
	AdjustmentCreditNoteCnStatusCancelled string = "cancelled"
)

// prop value enum
func (m *AdjustmentCreditNote) validateCnStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, adjustmentCreditNoteTypeCnStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AdjustmentCreditNote) validateCnStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.CnStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateCnStatusEnum("cn_status", "body", m.CnStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdjustmentCreditNote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdjustmentCreditNote) UnmarshalBinary(b []byte) error {
	var res AdjustmentCreditNote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
