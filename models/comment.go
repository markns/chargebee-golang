// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Comment comment
// swagger:model Comment
type Comment struct {

	// added by
	AddedBy string `json:"added_by,omitempty"`

	// created at
	CreatedAt int64 `json:"created_at,omitempty"`

	// entity id
	EntityID string `json:"entity_id,omitempty"`

	// entity type
	EntityType string `json:"entity_type,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this comment
func (m *Comment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commentTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customer","subscription","invoice","credit_note","transaction","plan","addon","coupon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commentTypeEntityTypePropEnum = append(commentTypeEntityTypePropEnum, v)
	}
}

const (

	// CommentEntityTypeCustomer captures enum value "customer"
	CommentEntityTypeCustomer string = "customer"

	// CommentEntityTypeSubscription captures enum value "subscription"
	CommentEntityTypeSubscription string = "subscription"

	// CommentEntityTypeInvoice captures enum value "invoice"
	CommentEntityTypeInvoice string = "invoice"

	// CommentEntityTypeCreditNote captures enum value "credit_note"
	CommentEntityTypeCreditNote string = "credit_note"

	// CommentEntityTypeTransaction captures enum value "transaction"
	CommentEntityTypeTransaction string = "transaction"

	// CommentEntityTypePlan captures enum value "plan"
	CommentEntityTypePlan string = "plan"

	// CommentEntityTypeAddon captures enum value "addon"
	CommentEntityTypeAddon string = "addon"

	// CommentEntityTypeCoupon captures enum value "coupon"
	CommentEntityTypeCoupon string = "coupon"
)

// prop value enum
func (m *Comment) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, commentTypeEntityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Comment) validateEntityType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

var commentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["card","paypal_express_checkout","amazon_payments","direct_debit","generic","alipay","unionpay","apple_pay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commentTypeTypePropEnum = append(commentTypeTypePropEnum, v)
	}
}

const (

	// CommentTypeCard captures enum value "card"
	CommentTypeCard string = "card"

	// CommentTypePaypalExpressCheckout captures enum value "paypal_express_checkout"
	CommentTypePaypalExpressCheckout string = "paypal_express_checkout"

	// CommentTypeAmazonPayments captures enum value "amazon_payments"
	CommentTypeAmazonPayments string = "amazon_payments"

	// CommentTypeDirectDebit captures enum value "direct_debit"
	CommentTypeDirectDebit string = "direct_debit"

	// CommentTypeGeneric captures enum value "generic"
	CommentTypeGeneric string = "generic"

	// CommentTypeAlipay captures enum value "alipay"
	CommentTypeAlipay string = "alipay"

	// CommentTypeUnionpay captures enum value "unionpay"
	CommentTypeUnionpay string = "unionpay"

	// CommentTypeApplePay captures enum value "apple_pay"
	CommentTypeApplePay string = "apple_pay"
)

// prop value enum
func (m *Comment) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, commentTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Comment) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Comment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Comment) UnmarshalBinary(b []byte) error {
	var res Comment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
