// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoiceRecordRefundRequest invoice record refund request
// swagger:model InvoiceRecordRefundRequest

type InvoiceRecordRefundRequest struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// credit note reason code
	CreditNoteReasonCode string `json:"credit_note[reason_code],omitempty"`

	// customer notes
	CustomerNotes string `json:"customer_notes,omitempty"`

	// transaction amount
	TransactionAmount int32 `json:"transaction[amount],omitempty"`

	// transaction date
	TransactionDate int64 `json:"transaction[date],omitempty"`

	// transaction payment method
	TransactionPaymentMethod string `json:"transaction[payment_method],omitempty"`

	// transaction reference number
	TransactionReferenceNumber string `json:"transaction[reference_number],omitempty"`
}

/* polymorph InvoiceRecordRefundRequest comment false */

/* polymorph InvoiceRecordRefundRequest credit_note[reason_code] false */

/* polymorph InvoiceRecordRefundRequest customer_notes false */

/* polymorph InvoiceRecordRefundRequest transaction[amount] false */

/* polymorph InvoiceRecordRefundRequest transaction[date] false */

/* polymorph InvoiceRecordRefundRequest transaction[payment_method] false */

/* polymorph InvoiceRecordRefundRequest transaction[reference_number] false */

// Validate validates this invoice record refund request
func (m *InvoiceRecordRefundRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditNoteReasonCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionPaymentMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var invoiceRecordRefundRequestTypeCreditNoteReasonCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["write_off","subscription_change","subscription_cancellation","chargeback","product_unsatisfactory","service_unsatisfactory","order_change","order_cancellation","waiver","other","fraudulent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceRecordRefundRequestTypeCreditNoteReasonCodePropEnum = append(invoiceRecordRefundRequestTypeCreditNoteReasonCodePropEnum, v)
	}
}

const (
	// InvoiceRecordRefundRequestCreditNoteReasonCodeWriteOff captures enum value "write_off"
	InvoiceRecordRefundRequestCreditNoteReasonCodeWriteOff string = "write_off"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeSubscriptionChange captures enum value "subscription_change"
	InvoiceRecordRefundRequestCreditNoteReasonCodeSubscriptionChange string = "subscription_change"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeSubscriptionCancellation captures enum value "subscription_cancellation"
	InvoiceRecordRefundRequestCreditNoteReasonCodeSubscriptionCancellation string = "subscription_cancellation"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeChargeback captures enum value "chargeback"
	InvoiceRecordRefundRequestCreditNoteReasonCodeChargeback string = "chargeback"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeProductUnsatisfactory captures enum value "product_unsatisfactory"
	InvoiceRecordRefundRequestCreditNoteReasonCodeProductUnsatisfactory string = "product_unsatisfactory"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeServiceUnsatisfactory captures enum value "service_unsatisfactory"
	InvoiceRecordRefundRequestCreditNoteReasonCodeServiceUnsatisfactory string = "service_unsatisfactory"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeOrderChange captures enum value "order_change"
	InvoiceRecordRefundRequestCreditNoteReasonCodeOrderChange string = "order_change"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeOrderCancellation captures enum value "order_cancellation"
	InvoiceRecordRefundRequestCreditNoteReasonCodeOrderCancellation string = "order_cancellation"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeWaiver captures enum value "waiver"
	InvoiceRecordRefundRequestCreditNoteReasonCodeWaiver string = "waiver"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeOther captures enum value "other"
	InvoiceRecordRefundRequestCreditNoteReasonCodeOther string = "other"
	// InvoiceRecordRefundRequestCreditNoteReasonCodeFraudulent captures enum value "fraudulent"
	InvoiceRecordRefundRequestCreditNoteReasonCodeFraudulent string = "fraudulent"
)

// prop value enum
func (m *InvoiceRecordRefundRequest) validateCreditNoteReasonCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, invoiceRecordRefundRequestTypeCreditNoteReasonCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceRecordRefundRequest) validateCreditNoteReasonCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditNoteReasonCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateCreditNoteReasonCodeEnum("credit_note[reason_code]", "body", m.CreditNoteReasonCode); err != nil {
		return err
	}

	return nil
}

var invoiceRecordRefundRequestTypeTransactionPaymentMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["card","cash","check","chargeback","bank_transfer","amazon_payments","paypal_express_checkout","direct_debit","alipay","unionpay","apple_pay","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceRecordRefundRequestTypeTransactionPaymentMethodPropEnum = append(invoiceRecordRefundRequestTypeTransactionPaymentMethodPropEnum, v)
	}
}

const (
	// InvoiceRecordRefundRequestTransactionPaymentMethodCard captures enum value "card"
	InvoiceRecordRefundRequestTransactionPaymentMethodCard string = "card"
	// InvoiceRecordRefundRequestTransactionPaymentMethodCash captures enum value "cash"
	InvoiceRecordRefundRequestTransactionPaymentMethodCash string = "cash"
	// InvoiceRecordRefundRequestTransactionPaymentMethodCheck captures enum value "check"
	InvoiceRecordRefundRequestTransactionPaymentMethodCheck string = "check"
	// InvoiceRecordRefundRequestTransactionPaymentMethodChargeback captures enum value "chargeback"
	InvoiceRecordRefundRequestTransactionPaymentMethodChargeback string = "chargeback"
	// InvoiceRecordRefundRequestTransactionPaymentMethodBankTransfer captures enum value "bank_transfer"
	InvoiceRecordRefundRequestTransactionPaymentMethodBankTransfer string = "bank_transfer"
	// InvoiceRecordRefundRequestTransactionPaymentMethodAmazonPayments captures enum value "amazon_payments"
	InvoiceRecordRefundRequestTransactionPaymentMethodAmazonPayments string = "amazon_payments"
	// InvoiceRecordRefundRequestTransactionPaymentMethodPaypalExpressCheckout captures enum value "paypal_express_checkout"
	InvoiceRecordRefundRequestTransactionPaymentMethodPaypalExpressCheckout string = "paypal_express_checkout"
	// InvoiceRecordRefundRequestTransactionPaymentMethodDirectDebit captures enum value "direct_debit"
	InvoiceRecordRefundRequestTransactionPaymentMethodDirectDebit string = "direct_debit"
	// InvoiceRecordRefundRequestTransactionPaymentMethodAlipay captures enum value "alipay"
	InvoiceRecordRefundRequestTransactionPaymentMethodAlipay string = "alipay"
	// InvoiceRecordRefundRequestTransactionPaymentMethodUnionpay captures enum value "unionpay"
	InvoiceRecordRefundRequestTransactionPaymentMethodUnionpay string = "unionpay"
	// InvoiceRecordRefundRequestTransactionPaymentMethodApplePay captures enum value "apple_pay"
	InvoiceRecordRefundRequestTransactionPaymentMethodApplePay string = "apple_pay"
	// InvoiceRecordRefundRequestTransactionPaymentMethodOther captures enum value "other"
	InvoiceRecordRefundRequestTransactionPaymentMethodOther string = "other"
)

// prop value enum
func (m *InvoiceRecordRefundRequest) validateTransactionPaymentMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, invoiceRecordRefundRequestTypeTransactionPaymentMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceRecordRefundRequest) validateTransactionPaymentMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionPaymentMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransactionPaymentMethodEnum("transaction[payment_method]", "body", m.TransactionPaymentMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoiceRecordRefundRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoiceRecordRefundRequest) UnmarshalBinary(b []byte) error {
	var res InvoiceRecordRefundRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
