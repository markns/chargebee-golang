// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionEstimate subscription estimate
// swagger:model SubscriptionEstimate

type SubscriptionEstimate struct {

	// currency code
	CurrencyCode string `json:"currency_code,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// next billing at
	NextBillingAt int64 `json:"next_billing_at,omitempty"`

	// shipping address
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

/* polymorph SubscriptionEstimate currency_code false */

/* polymorph SubscriptionEstimate id false */

/* polymorph SubscriptionEstimate next_billing_at false */

/* polymorph SubscriptionEstimate shipping_address false */

/* polymorph SubscriptionEstimate status false */

// Validate validates this subscription estimate
func (m *SubscriptionEstimate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShippingAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionEstimate) validateShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingAddress) { // not required
		return nil
	}

	if m.ShippingAddress != nil {

		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address")
			}
			return err
		}
	}

	return nil
}

var subscriptionEstimateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["future","in_trial","active","non_renewing","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionEstimateTypeStatusPropEnum = append(subscriptionEstimateTypeStatusPropEnum, v)
	}
}

const (
	// SubscriptionEstimateStatusFuture captures enum value "future"
	SubscriptionEstimateStatusFuture string = "future"
	// SubscriptionEstimateStatusInTrial captures enum value "in_trial"
	SubscriptionEstimateStatusInTrial string = "in_trial"
	// SubscriptionEstimateStatusActive captures enum value "active"
	SubscriptionEstimateStatusActive string = "active"
	// SubscriptionEstimateStatusNonRenewing captures enum value "non_renewing"
	SubscriptionEstimateStatusNonRenewing string = "non_renewing"
	// SubscriptionEstimateStatusCancelled captures enum value "cancelled"
	SubscriptionEstimateStatusCancelled string = "cancelled"
)

// prop value enum
func (m *SubscriptionEstimate) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subscriptionEstimateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionEstimate) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionEstimate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionEstimate) UnmarshalBinary(b []byte) error {
	var res SubscriptionEstimate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
