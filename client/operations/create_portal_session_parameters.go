// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/markns/chargebee-golang/models"
)

// NewCreatePortalSessionParams creates a new CreatePortalSessionParams object
// with the default values initialized.
func NewCreatePortalSessionParams() *CreatePortalSessionParams {
	var ()
	return &CreatePortalSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreatePortalSessionParamsWithTimeout creates a new CreatePortalSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreatePortalSessionParamsWithTimeout(timeout time.Duration) *CreatePortalSessionParams {
	var ()
	return &CreatePortalSessionParams{

		timeout: timeout,
	}
}

// NewCreatePortalSessionParamsWithContext creates a new CreatePortalSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreatePortalSessionParamsWithContext(ctx context.Context) *CreatePortalSessionParams {
	var ()
	return &CreatePortalSessionParams{

		Context: ctx,
	}
}

// NewCreatePortalSessionParamsWithHTTPClient creates a new CreatePortalSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreatePortalSessionParamsWithHTTPClient(client *http.Client) *CreatePortalSessionParams {
	var ()
	return &CreatePortalSessionParams{
		HTTPClient: client,
	}
}

/*CreatePortalSessionParams contains all the parameters to send to the API endpoint
for the create portal session operation typically these are written to a http.Request
*/
type CreatePortalSessionParams struct {

	/*PortalSessionCreateRequest*/
	PortalSessionCreateRequest *models.PortalSessionCreateRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create portal session params
func (o *CreatePortalSessionParams) WithTimeout(timeout time.Duration) *CreatePortalSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create portal session params
func (o *CreatePortalSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create portal session params
func (o *CreatePortalSessionParams) WithContext(ctx context.Context) *CreatePortalSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create portal session params
func (o *CreatePortalSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create portal session params
func (o *CreatePortalSessionParams) WithHTTPClient(client *http.Client) *CreatePortalSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create portal session params
func (o *CreatePortalSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPortalSessionCreateRequest adds the portalSessionCreateRequest to the create portal session params
func (o *CreatePortalSessionParams) WithPortalSessionCreateRequest(portalSessionCreateRequest *models.PortalSessionCreateRequest) *CreatePortalSessionParams {
	o.SetPortalSessionCreateRequest(portalSessionCreateRequest)
	return o
}

// SetPortalSessionCreateRequest adds the portalSessionCreateRequest to the create portal session params
func (o *CreatePortalSessionParams) SetPortalSessionCreateRequest(portalSessionCreateRequest *models.PortalSessionCreateRequest) {
	o.PortalSessionCreateRequest = portalSessionCreateRequest
}

// WriteToRequest writes these params to a swagger request
func (o *CreatePortalSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PortalSessionCreateRequest == nil {
		o.PortalSessionCreateRequest = new(models.PortalSessionCreateRequest)
	}

	if err := r.SetBodyParam(o.PortalSessionCreateRequest); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
