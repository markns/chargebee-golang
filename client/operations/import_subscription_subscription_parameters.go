// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/markns/chargebee-golang/models"
)

// NewImportSubscriptionSubscriptionParams creates a new ImportSubscriptionSubscriptionParams object
// with the default values initialized.
func NewImportSubscriptionSubscriptionParams() *ImportSubscriptionSubscriptionParams {
	var ()
	return &ImportSubscriptionSubscriptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportSubscriptionSubscriptionParamsWithTimeout creates a new ImportSubscriptionSubscriptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportSubscriptionSubscriptionParamsWithTimeout(timeout time.Duration) *ImportSubscriptionSubscriptionParams {
	var ()
	return &ImportSubscriptionSubscriptionParams{

		timeout: timeout,
	}
}

// NewImportSubscriptionSubscriptionParamsWithContext creates a new ImportSubscriptionSubscriptionParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportSubscriptionSubscriptionParamsWithContext(ctx context.Context) *ImportSubscriptionSubscriptionParams {
	var ()
	return &ImportSubscriptionSubscriptionParams{

		Context: ctx,
	}
}

// NewImportSubscriptionSubscriptionParamsWithHTTPClient creates a new ImportSubscriptionSubscriptionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportSubscriptionSubscriptionParamsWithHTTPClient(client *http.Client) *ImportSubscriptionSubscriptionParams {
	var ()
	return &ImportSubscriptionSubscriptionParams{
		HTTPClient: client,
	}
}

/*ImportSubscriptionSubscriptionParams contains all the parameters to send to the API endpoint
for the import subscription subscription operation typically these are written to a http.Request
*/
type ImportSubscriptionSubscriptionParams struct {

	/*SubscriptionImportSubscriptionRequest*/
	SubscriptionImportSubscriptionRequest *models.SubscriptionImportSubscriptionRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) WithTimeout(timeout time.Duration) *ImportSubscriptionSubscriptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) WithContext(ctx context.Context) *ImportSubscriptionSubscriptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) WithHTTPClient(client *http.Client) *ImportSubscriptionSubscriptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubscriptionImportSubscriptionRequest adds the subscriptionImportSubscriptionRequest to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) WithSubscriptionImportSubscriptionRequest(subscriptionImportSubscriptionRequest *models.SubscriptionImportSubscriptionRequest) *ImportSubscriptionSubscriptionParams {
	o.SetSubscriptionImportSubscriptionRequest(subscriptionImportSubscriptionRequest)
	return o
}

// SetSubscriptionImportSubscriptionRequest adds the subscriptionImportSubscriptionRequest to the import subscription subscription params
func (o *ImportSubscriptionSubscriptionParams) SetSubscriptionImportSubscriptionRequest(subscriptionImportSubscriptionRequest *models.SubscriptionImportSubscriptionRequest) {
	o.SubscriptionImportSubscriptionRequest = subscriptionImportSubscriptionRequest
}

// WriteToRequest writes these params to a swagger request
func (o *ImportSubscriptionSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SubscriptionImportSubscriptionRequest == nil {
		o.SubscriptionImportSubscriptionRequest = new(models.SubscriptionImportSubscriptionRequest)
	}

	if err := r.SetBodyParam(o.SubscriptionImportSubscriptionRequest); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
