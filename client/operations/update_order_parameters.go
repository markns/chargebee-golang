// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/markns/chargebee-golang/models"
)

// NewUpdateOrderParams creates a new UpdateOrderParams object
// with the default values initialized.
func NewUpdateOrderParams() *UpdateOrderParams {
	var ()
	return &UpdateOrderParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateOrderParamsWithTimeout creates a new UpdateOrderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateOrderParamsWithTimeout(timeout time.Duration) *UpdateOrderParams {
	var ()
	return &UpdateOrderParams{

		timeout: timeout,
	}
}

// NewUpdateOrderParamsWithContext creates a new UpdateOrderParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateOrderParamsWithContext(ctx context.Context) *UpdateOrderParams {
	var ()
	return &UpdateOrderParams{

		Context: ctx,
	}
}

// NewUpdateOrderParamsWithHTTPClient creates a new UpdateOrderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateOrderParamsWithHTTPClient(client *http.Client) *UpdateOrderParams {
	var ()
	return &UpdateOrderParams{
		HTTPClient: client,
	}
}

/*UpdateOrderParams contains all the parameters to send to the API endpoint
for the update order operation typically these are written to a http.Request
*/
type UpdateOrderParams struct {

	/*OrderUpdateRequest*/
	OrderUpdateRequest *models.OrderUpdateRequest
	/*ID*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update order params
func (o *UpdateOrderParams) WithTimeout(timeout time.Duration) *UpdateOrderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update order params
func (o *UpdateOrderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update order params
func (o *UpdateOrderParams) WithContext(ctx context.Context) *UpdateOrderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update order params
func (o *UpdateOrderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update order params
func (o *UpdateOrderParams) WithHTTPClient(client *http.Client) *UpdateOrderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update order params
func (o *UpdateOrderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrderUpdateRequest adds the orderUpdateRequest to the update order params
func (o *UpdateOrderParams) WithOrderUpdateRequest(orderUpdateRequest *models.OrderUpdateRequest) *UpdateOrderParams {
	o.SetOrderUpdateRequest(orderUpdateRequest)
	return o
}

// SetOrderUpdateRequest adds the orderUpdateRequest to the update order params
func (o *UpdateOrderParams) SetOrderUpdateRequest(orderUpdateRequest *models.OrderUpdateRequest) {
	o.OrderUpdateRequest = orderUpdateRequest
}

// WithID adds the id to the update order params
func (o *UpdateOrderParams) WithID(id string) *UpdateOrderParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update order params
func (o *UpdateOrderParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateOrderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OrderUpdateRequest == nil {
		o.OrderUpdateRequest = new(models.OrderUpdateRequest)
	}

	if err := r.SetBodyParam(o.OrderUpdateRequest); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
