// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/markns/chargebee-golang/models"
)

// NewRefundInvoiceParams creates a new RefundInvoiceParams object
// with the default values initialized.
func NewRefundInvoiceParams() *RefundInvoiceParams {
	var ()
	return &RefundInvoiceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRefundInvoiceParamsWithTimeout creates a new RefundInvoiceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRefundInvoiceParamsWithTimeout(timeout time.Duration) *RefundInvoiceParams {
	var ()
	return &RefundInvoiceParams{

		timeout: timeout,
	}
}

// NewRefundInvoiceParamsWithContext creates a new RefundInvoiceParams object
// with the default values initialized, and the ability to set a context for a request
func NewRefundInvoiceParamsWithContext(ctx context.Context) *RefundInvoiceParams {
	var ()
	return &RefundInvoiceParams{

		Context: ctx,
	}
}

// NewRefundInvoiceParamsWithHTTPClient creates a new RefundInvoiceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRefundInvoiceParamsWithHTTPClient(client *http.Client) *RefundInvoiceParams {
	var ()
	return &RefundInvoiceParams{
		HTTPClient: client,
	}
}

/*RefundInvoiceParams contains all the parameters to send to the API endpoint
for the refund invoice operation typically these are written to a http.Request
*/
type RefundInvoiceParams struct {

	/*InvoiceRefundRequest*/
	InvoiceRefundRequest *models.InvoiceRefundRequest
	/*ID*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the refund invoice params
func (o *RefundInvoiceParams) WithTimeout(timeout time.Duration) *RefundInvoiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the refund invoice params
func (o *RefundInvoiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the refund invoice params
func (o *RefundInvoiceParams) WithContext(ctx context.Context) *RefundInvoiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the refund invoice params
func (o *RefundInvoiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the refund invoice params
func (o *RefundInvoiceParams) WithHTTPClient(client *http.Client) *RefundInvoiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the refund invoice params
func (o *RefundInvoiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInvoiceRefundRequest adds the invoiceRefundRequest to the refund invoice params
func (o *RefundInvoiceParams) WithInvoiceRefundRequest(invoiceRefundRequest *models.InvoiceRefundRequest) *RefundInvoiceParams {
	o.SetInvoiceRefundRequest(invoiceRefundRequest)
	return o
}

// SetInvoiceRefundRequest adds the invoiceRefundRequest to the refund invoice params
func (o *RefundInvoiceParams) SetInvoiceRefundRequest(invoiceRefundRequest *models.InvoiceRefundRequest) {
	o.InvoiceRefundRequest = invoiceRefundRequest
}

// WithID adds the id to the refund invoice params
func (o *RefundInvoiceParams) WithID(id string) *RefundInvoiceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the refund invoice params
func (o *RefundInvoiceParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *RefundInvoiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.InvoiceRefundRequest == nil {
		o.InvoiceRefundRequest = new(models.InvoiceRefundRequest)
	}

	if err := r.SetBodyParam(o.InvoiceRefundRequest); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
